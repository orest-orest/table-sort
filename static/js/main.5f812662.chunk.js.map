{"version":3,"sources":["components/DetailDescription.js","redux/actions/actions.js","components/TableSort.js","App.js","reportWebVitals.js","redux/reducers/mainReducer.js","redux/store/store.js","index.js"],"names":["DetailDescription","description","firstName","lastName","adress","city","state","zip","SET_RECEIVED_DATA","setReceivedData","receivedData","type","tableLayout","mapDispatchToProps","getData","dispatch","a","fetch","response","json","connect","data","dataList","useState","dataState","setDataState","columnToSort","setColumnToSort","displaySegment","setDisplaySegment","segmentIndex","setSegmentIndex","maxSegmentLists","setMaxSegmentLists","detailDescription","setDetailDescription","inputValue","setInputValue","filterValue","setFilterValue","currentFilterState","setCurrentFilterState","useEffect","undefined","Math","ceil","length","slice","handleSelectPage","value","nextIndex","nextEndIndex","prevIndex","prevEndIndex","onChange","e","target","defaultValue","disabled","onClick","preventDefault","newState","filter","item","className","map","index","param","reverse","sort","b","handleColumnSort","id","email","phone","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducers","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f812662.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const DetailDescription = ({description}) => {\r\n\r\n    return (\r\n        <div>\r\n            <h3>Profile Info</h3>\r\n            <p>Selected Profile: {description.firstName} {description.lastName}</p>\r\n            <p>Description: {description.description}</p>\r\n            <p>City: {description.adress.city}</p>\r\n            <p>State: {description.adress.state}</p>\r\n            <p>Index: {description.adress.zip}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","export const SET_RECEIVED_DATA = 'SET_RECEIVED_DATA'\r\nexport const SET_FAVORITE = 'SET_FAVORITE'\r\nexport const DELETE_ROUTE = 'DELETE_ROUTE'\r\n\r\nexport const getData =  () => async dispatch =>{\r\n    const response = await fetch('https://itrex-react-lab-files.s3.eu-central-1.amazonaws.com/react-test-api.json');\r\n    const receivedData = await response.json();\r\n\r\n    dispatch(setReceivedData(receivedData))\r\n}\r\n\r\nexport const setReceivedData = (receivedData) => {\r\n    return {type: SET_RECEIVED_DATA, receivedData}\r\n}\r\n","import React from 'react';\r\nimport {DetailDescription} from './DetailDescription'\r\nimport {useEffect, useState} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {getData} from \"../redux/actions/actions\";\r\nimport './../App.css';\r\n\r\n\r\nconst tableLayout = [\r\n    ['â„–', 'id'],\r\n    ['First Name', 'firstName'],\r\n    ['Last Name', 'lastName'],\r\n    ['Email', 'email'],\r\n    ['Phone', 'phone'],\r\n    ['State', 'state']\r\n]\r\n\r\nexport const FilterField = () => {\r\n\r\n    return (\r\n        <div>\r\n            <input/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst TableSort = ({data, getData}) => {\r\n\r\n    const [dataState, setDataState] = useState()\r\n    const [columnToSort, setColumnToSort] = useState()\r\n    const [displaySegment, setDisplaySegment] = useState()\r\n    const [segmentIndex, setSegmentIndex] = useState(0)\r\n    const [maxSegmentLists, setMaxSegmentLists] = useState()\r\n    const [detailDescription, setDetailDescription] = useState(null)\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [filterValue, setFilterValue] = useState()\r\n    const [currentFilterState, setCurrentFilterState] = useState()\r\n\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (data.data !== undefined) {\r\n            setDataState(data.data)\r\n            setMaxSegmentLists(Math.ceil(data.data.length / 20) - 1)\r\n        }\r\n    }, [data])\r\n\r\n\r\n    useEffect(() => {\r\n        if (dataState !== undefined) {\r\n            setDisplaySegment(dataState.slice(0, 20))\r\n            setMaxSegmentLists(Math.ceil(dataState.length / 20))\r\n        }\r\n    }, [dataState])\r\n\r\n\r\n    const handleColumnSort = (param) => {\r\n        setColumnToSort(param)\r\n        if (columnToSort === param) {\r\n            setColumnToSort(param + 'Down')\r\n            const newState = dataState.reverse()\r\n            setDataState([...newState])\r\n            setDisplaySegment(dataState.slice(dataState.length - 20, dataState.length))\r\n            if (maxSegmentLists === 0) {\r\n                setSegmentIndex(maxSegmentLists)\r\n                return;\r\n            }\r\n            setSegmentIndex(maxSegmentLists - 1)\r\n            return\r\n        }\r\n        const newState = dataState.sort((a, b) => {\r\n            if (a[param] < b[param]) {\r\n                return -1;\r\n            }\r\n            if (a[param] > b[param]) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        })\r\n        setDataState([...newState])\r\n        setDisplaySegment(dataState.slice(0, 20))\r\n        setSegmentIndex(0)\r\n    }\r\n\r\n    const handleFilter = (e) => {\r\n        e.preventDefault()\r\n        if (inputValue === '') {\r\n            setDataState(data.data)\r\n            return\r\n        }\r\n        let newState = dataState.filter((item) => {\r\n            if (item[filterValue] == inputValue) {\r\n                return true\r\n            }\r\n            return false\r\n        })\r\n        setDataState(newState)\r\n        setSegmentIndex(0)\r\n    }\r\n\r\n    const handleStateFilter = (e) => {\r\n        e.preventDefault()\r\n        let newState = dataState.filter((item) => {\r\n            if (item.adress.state == currentFilterState) {\r\n                return true\r\n            }\r\n            return false\r\n        })\r\n        setDataState(newState)\r\n        setSegmentIndex(0)\r\n    }\r\n\r\n    const handleSelectPage = (value) => {\r\n        if (value === 'next') {\r\n            const nextIndex = (segmentIndex + 1) * 20\r\n            const nextEndIndex = nextIndex + 20\r\n            setDisplaySegment(dataState.slice(nextIndex, nextEndIndex))\r\n            setSegmentIndex(segmentIndex + 1)\r\n            return\r\n        }\r\n        if (value === 'prev') {\r\n            const prevIndex = (segmentIndex - 1) * 20\r\n            const prevEndIndex = prevIndex + 20\r\n            setDisplaySegment(dataState.slice(prevIndex, prevEndIndex))\r\n            setSegmentIndex(segmentIndex - 1)\r\n            return\r\n        }\r\n    }\r\n\r\n    const handleDeleteFilter = (e) => {\r\n        e.preventDefault()\r\n        setDataState(data.data)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={e => setInputValue(e.target.value)}\r\n                />\r\n                <select defaultValue={'DEFAULT'} value={filterValue} onChange={e => setFilterValue(e.target.value)}>\r\n                    <option value=\"DEFAULT\" disabled>Choose option</option>\r\n                    <option value=\"id\">â„–</option>\r\n                    <option value=\"firstName\">First Name</option>\r\n                    <option value=\"lastName\">Last Name</option>\r\n                    <option value=\"email\">Email</option>\r\n                    <option value=\"phone\">Phone</option>\r\n                </select>\r\n                <button onClick={handleFilter}>Confirm</button>\r\n            </form>\r\n            <form>\r\n                <select defaultValue={'DEFAULT'} value={currentFilterState}\r\n                        onChange={e => setCurrentFilterState(e.target.value)}>\r\n                    <option value='DEFAULT' disabled>Choose state</option>\r\n                    <option value=\"WI\">WI</option>\r\n                    <option value=\"TI\">TI</option>\r\n                    <option value=\"FL\">FL</option>\r\n                    <option value=\"NE\">NE</option>\r\n                    <option value=\"OR\">OR</option>\r\n                </select>\r\n                <button onClick={handleStateFilter}>Confirm</button>\r\n            </form>\r\n            <form>\r\n                <button onClick={handleDeleteFilter}>Clear filter</button>\r\n            </form>\r\n            <table className=\"Table\">\r\n                <thead>\r\n                <tr className=\"TableUpperRow\">\r\n                    {tableLayout.map((item, index) => {\r\n                        return <th key={index} className=\"TableCeil\" onClick={() => handleColumnSort(item[1])}>\r\n                            <p>{item[0]}</p>\r\n                            <span>{columnToSort === item[1] ? 'ðŸ”¼' : columnToSort === item[1] + 'Down' ? 'ðŸ”½' : null}</span>\r\n                        </th>\r\n                    })}\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {displaySegment && displaySegment.map((item, index) => {\r\n                    return <tr key={index} className=\"TableCeil\" onClick={() => setDetailDescription(item)}>\r\n                        <th>{item.id}</th>\r\n                        <th>{item.firstName}</th>\r\n                        <th>{item.lastName}</th>\r\n                        <th>{item.email}</th>\r\n                        <th>{item.phone}</th>\r\n                        <th>{item.adress.state}</th>\r\n                    </tr>\r\n                })}\r\n                </tbody>\r\n            </table>\r\n            <ul className=\"PageScroller\">\r\n                {segmentIndex !== 0 ?\r\n                    <li>\r\n                        <button className=\"PageButtons\" onClick={() => handleSelectPage('prev')}>prev</button>\r\n                    </li> : null}\r\n                <li>{segmentIndex + 1}</li>\r\n                {segmentIndex + 1 !== maxSegmentLists && maxSegmentLists !== 0 ?\r\n                    <li>\r\n                        <button className=\"PageButtons\" onClick={() => handleSelectPage('next')}>next</button>\r\n                    </li> : null}\r\n            </ul>\r\n            {detailDescription && <DetailDescription description={detailDescription}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (({dataList}) => ({\r\n    data: dataList\r\n}))\r\n\r\nconst mapDispatchToProps = {\r\n    getData\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableSort)\r\n","import './App.css';\nimport TableSort from \"./components/TableSort\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TableSort/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {SET_RECEIVED_DATA} from '../actions/actions'\r\n\r\n\r\nlet initialState = {\r\n\r\n}\r\n\r\n\r\nexport const MainReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_RECEIVED_DATA: {\r\n            return {\r\n                ...state,\r\n                data: action.receivedData\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import {combineReducers, createStore, applyMiddleware} from \"redux\";\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from \"redux-thunk\";\r\nimport {MainReducer} from '../reducers/mainReducer'\r\n\r\nconst reducers = combineReducers({\r\n    dataList: MainReducer\r\n});\r\n\r\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport store from \"./redux/store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n      <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}